// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ========================================
// ENUMS
// ========================================

enum UserRole {
  USER
  MODERATOR
  ADMIN
  SUPER_ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
  BANNED
  PENDING_VERIFICATION
}

enum Gender {
  MALE
  FEMALE
  OTHER
  PREFER_NOT_TO_SAY
}

enum CheckInType {
  STADIUM
  HOME
  AWAY
}

enum CheckInStatus {
  PENDING
  CONFIRMED
  REJECTED
}

enum TaskCategory {
  PRESENCE
  SOCIAL
  PURCHASE
  ENGAGEMENT
  COMMUNITY
  SPECIAL
}

enum TaskDifficulty {
  EASY
  MEDIUM
  HARD
  EXPERT
}

enum TaskStatus {
  AVAILABLE
  IN_PROGRESS
  COMPLETED
  EXPIRED
  FAILED
}

enum TaskType {
  DAILY
  WEEKLY
  MONTHLY
  SEASONAL
  ONE_TIME
  RECURRING
}

enum BadgeCategory {
  ATTENDANCE
  SOCIAL
  SHOPPING
  ENGAGEMENT
  SPECIAL
  COMMUNITY
  REPUTATION
  LEADERSHIP
}

enum BadgeRarity {
  BRONZE
  SILVER
  GOLD
  PLATINUM
  LEGENDARY
  MYTHIC
}

enum EventCategory {
  TRAVEL
  SOCIAL
  CHARITY
  OFFICIAL
  COMMUNITY
  SPORTS
  CULTURAL
}

enum EventStatus {
  DRAFT
  PUBLISHED
  OPEN
  FULL
  CANCELLED
  FINISHED
}

enum EventType {
  MATCH_DAY
  MEETUP
  CHARITY
  TRAINING
  TOURNAMENT
  CELEBRATION
  AWAY_TRIP
}

enum NotificationType {
  GAME
  REWARD
  SOCIAL
  CHALLENGE
  WARNING
  SYSTEM
  EVENT
  BADGE
  TASK
  REPUTATION
}

enum NotificationPriority {
  LOW
  NORMAL
  HIGH
  URGENT
}

enum TransactionType {
  EARNED
  SPENT
  TRANSFERRED
  REFUNDED
  BONUS
  PENALTY
}

enum TransactionStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum ReputationAction {
  POSITIVE
  NEGATIVE
  NEUTRAL
}

enum ReputationCategory {
  ATTENDANCE
  COMMUNITY
  BEHAVIOR
  ENGAGEMENT
  LEADERSHIP
  ACCIDENT
}

enum ClubCategory {
  ELITE
  PREMIUM
  STANDARD
  DEVELOPING
}

enum ClubLevel {
  EXEMPLARY
  COMMENDABLE
  RESPECTABLE
  NEEDS_WORK
  DISHONORABLE
}

enum FanGroupCategory {
  OFFICIAL
  UNOFFICIAL
  COMMUNITY
  REGIONAL
  INTERNATIONAL
}

enum FanGroupLevel {
  EXEMPLARY
  COMMENDABLE
  RESPECTABLE
  NEEDS_WORK
  DISHONORABLE
}

enum MembershipStatus {
  PENDING
  ACTIVE
  SUSPENDED
  EXPIRED
  CANCELLED
}

enum MembershipRole {
  MEMBER
  MODERATOR
  LEADER
  FOUNDER
}

enum GameStatus {
  SCHEDULED
  LIVE
  FINISHED
  CANCELLED
  POSTPONED
}

enum GameType {
  HOME
  AWAY
  NEUTRAL
}

enum ChampionshipType {
  PREMIER_LEAGUE
  FA_CUP
  CARABAO_CUP
  CHAMPIONS_LEAGUE
  EUROPA_LEAGUE
  FRIENDLY
  OTHER
}

enum PurchaseCategory {
  MERCHANDISE
  TICKETS
  EXPERIENCE
  DISCOUNT
  DONATION
  SUBSCRIPTION
}

enum PurchaseStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

// ========================================
// MODELS
// ========================================

model User {
  id                String   @id @default(cuid())
  email             String   @unique
  username          String   @unique
  password          String
  firstName         String
  lastName          String
  displayName       String?
  avatar            String?
  bio               String?
  dateOfBirth       DateTime?
  gender            Gender?
  phoneNumber       String?
  location          String?
  timezone          String?
  language          String   @default("en")
  twitterId         String?  @unique
  walletAddress     String?  @unique
  termsAccepted     Boolean  @default(false)
  dataProcessingAccepted Boolean @default(false)
  privacyPolicyAccepted Boolean @default(false)
  
  // Status and roles
  status            UserStatus @default(ACTIVE)
  role              UserRole @default(USER)
  emailVerified     Boolean  @default(false)
  phoneVerified     Boolean  @default(false)
  
  // Gamification
  level             Int      @default(1)
  experience        Int      @default(0)
  tokens            Int      @default(0)
  lockedTokens      Int      @default(0)
  reputationScore   Int      @default(500)
  rankingPosition   Int?
  
  // Statistics
  totalCheckIns     Int      @default(0)
  totalEvents       Int      @default(0)
  totalTasks        Int      @default(0)
  totalBadges       Int      @default(0)
  totalPurchases    Int      @default(0)
  totalSocialShares Int      @default(0)
  
  // Streaks and achievements
  currentStreak     Int      @default(0)
  longestStreak     Int      @default(0)
  lastActivityDate  DateTime?
  
  // Settings
  pushNotifications Boolean  @default(true)
  emailNotifications Boolean @default(true)
  darkMode          Boolean  @default(false)
  autoCheckIn       Boolean  @default(false)
  privacySettings   Json?
  
  // Social media
  socialLinks       Json?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  lastLoginAt       DateTime?
  deletedAt         DateTime?
  
  // Relations
  clubFollow        ClubFollow?
  fanGroupMembership FanGroupMembership?
  checkIns          CheckIn[]
  tasks             UserTask[]
  badges            UserBadge[]
  events            EventParticipant[]
  notifications     Notification[]
  transactions      Transaction[]
  purchases         Purchase[]
  socialStats       SocialStats?
  reputationHistory ReputationHistory[]
  achievements      UserAchievement[]
  
  @@map("users")
}

model Club {
  id                String   @id @default(cuid())
  name              String   @unique
  shortName         String?
  nickname          String?
  description       String?
  logo              String?
  banner            String?
  
  // Basic info
  founded           Int?
  location          String?
  country           String?
  city              String?
  stadium           String?
  capacity          Int?
  
  // Classification
  category          ClubCategory @default(STANDARD)
  level             ClubLevel @default(RESPECTABLE)
  
  // Statistics
  totalFans         Int      @default(0)
  activeFans        Int      @default(0)
  totalTrophies     Int      @default(0)
  totalMatches      Int      @default(0)
  
  // Social
  website           String?
  socialLinks       Json?
  tags              String[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // Relations
  follows           ClubFollow[]
  games             Game[]
  events            Event[]
  achievements      ClubAchievement[]
  
  @@map("clubs")
}

model ClubFollow {
  id                String   @id @default(cuid())
  userId            String   @unique
  clubId            String
  followedAt        DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  club              Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@map("club_follows")
}

model FanGroup {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  logo              String?
  banner            String?
  
  // Basic info
  founded           Int?
  location          String?
  country           String?
  city              String?
  headquarters      String?
  
  // Classification
  category          FanGroupCategory @default(UNOFFICIAL)
  level             FanGroupLevel @default(RESPECTABLE)
  
  // Statistics
  totalMembers      Int      @default(0)
  activeMembers     Int      @default(0)
  totalEvents       Int      @default(0)
  totalPoints       Int      @default(0)
  rankingPosition   Int?
  
  // Settings
  isPublic          Boolean  @default(true)
  requiresApproval  Boolean  @default(false)
  maxMembers        Int?
  
  // Social
  website           String?
  socialLinks       Json?
  tags              String[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // Relations
  memberships       FanGroupMembership[]
  events            Event[]
  achievements      FanGroupAchievement[]
  
  @@map("fan_groups")
}

model FanGroupMembership {
  id                String   @id @default(cuid())
  userId            String   @unique
  fanGroupId        String
  status            MembershipStatus @default(PENDING)
  role              MembershipRole @default(MEMBER)
  joinedAt          DateTime @default(now())
  approvedAt        DateTime?
  approvedBy        String?
  leftAt            DateTime?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  fanGroup          FanGroup @relation(fields: [fanGroupId], references: [id], onDelete: Cascade)
  
  @@map("fan_group_memberships")
}

model Game {
  id                String   @id @default(cuid())
  clubId            String
  homeTeam          String
  awayTeam          String
  homeScore         Int?
  awayScore         Int?
  
  // Game details
  date              DateTime
  time              String?
  stadium           String?
  championship      ChampionshipType
  type              GameType @default(HOME)
  status            GameStatus @default(SCHEDULED)
  
  // Additional info
  description       String?
  highlights        String?
  attendance        Int?
  weather           String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  club              Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  checkIns          CheckIn[]
  events            Event[]
  
  @@map("games")
}

model CheckIn {
  id                String   @id @default(cuid())
  userId            String
  gameId            String?
  type              CheckInType
  status            CheckInStatus @default(PENDING)
  
  // Location
  latitude          Float?
  longitude          Float?
  location          String?
  isVerified        Boolean  @default(false)
  
  // Content
  photo             String?
  comment           String?
  prediction        Json? // {home: number, away: number}
  
  // Rewards
  baseTokens        Int      @default(0)
  bonusTokens       Int      @default(0)
  totalTokens       Int      @default(0)
  
  // Timestamps
  checkedInAt       DateTime @default(now())
  verifiedAt        DateTime?
  rejectedAt        DateTime?
  rejectedReason    String?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  game              Game?    @relation(fields: [gameId], references: [id], onDelete: SetNull)
  
  @@map("check_ins")
}

model Task {
  id                String   @id @default(cuid())
  title             String
  description       String?
  category          TaskCategory
  difficulty        TaskDifficulty
  type              TaskType
  
  // Requirements
  maxProgress       Int      @default(1)
  timeLimit         Int? // in minutes
  deadline          DateTime?
  
  // Rewards
  tokens            Int      @default(0)
  experience        Int      @default(0)
  reputationPoints  Int      @default(0)
  
  // Targeting
  clubId            String?
  fanGroupId        String?
  userLevel         Int?
  userReputation    Int?
  
  // Settings
  isActive          Boolean  @default(true)
  isRepeatable      Boolean  @default(false)
  maxCompletions    Int?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  expiresAt         DateTime?
  
  // Relations
  userTasks         UserTask[]
  
  @@map("tasks")
}

model UserTask {
  id                String   @id @default(cuid())
  userId            String
  taskId            String
  status            TaskStatus @default(AVAILABLE)
  progress          Int      @default(0)
  completedAt       DateTime?
  failedAt          DateTime?
  failedReason      String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  task              Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  
  @@unique([userId, taskId])
  @@map("user_tasks")
}

model Badge {
  id                String   @id @default(cuid())
  name              String   @unique
  description       String?
  category          BadgeCategory
  rarity            BadgeRarity
  icon              String?
  iconComponent     String?
  
  // Requirements
  requirement       String?
  maxProgress       Int      @default(1)
  
  // Rewards
  tokens            Int      @default(0)
  experience        Int      @default(0)
  
  // Settings
  isActive          Boolean  @default(true)
  isHidden          Boolean  @default(false)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  userBadges        UserBadge[]
  
  @@map("badges")
}

model UserBadge {
  id                String   @id @default(cuid())
  userId            String
  badgeId           String
  progress          Int      @default(0)
  earnedAt          DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge             Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  
  @@unique([userId, badgeId])
  @@map("user_badges")
}

model Event {
  id                String   @id @default(cuid())
  title             String
  description       String?
  category          EventCategory
  type              EventType
  
  // Event details
  date              DateTime
  time              String?
  location          String?
  latitude          Float?
  longitude          Float?
  
  // Organization
  organizerId       String? // Can be club, fan group, or user
  organizerType     String? // 'club', 'fan_group', 'user'
  clubId            String?
  fanGroupId        String?
  gameId            String?
  
  // Capacity and pricing
  maxParticipants   Int?
  currentParticipants Int    @default(0)
  price             Decimal? @db.Decimal(10, 2)
  currency          String   @default("GBP")
  
  // Status
  status            EventStatus @default(DRAFT)
  isPublic          Boolean  @default(true)
  
  // Additional info
  image             String?
  tags              String[]
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?
  
  // Relations
  club              Club?    @relation(fields: [clubId], references: [id], onDelete: SetNull)
  fanGroup          FanGroup? @relation(fields: [fanGroupId], references: [id], onDelete: SetNull)
  game              Game?    @relation(fields: [gameId], references: [id], onDelete: SetNull)
  participants      EventParticipant[]
  
  @@map("events")
}

model EventParticipant {
  id                String   @id @default(cuid())
  userId            String
  eventId           String
  status            String   @default("registered") // registered, confirmed, attended, cancelled
  registeredAt      DateTime @default(now())
  confirmedAt       DateTime?
  attendedAt        DateTime?
  cancelledAt       DateTime?
  cancelledReason   String?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  event             Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  
  @@unique([userId, eventId])
  @@map("event_participants")
}

model Notification {
  id                String   @id @default(cuid())
  userId            String
  type              NotificationType
  priority          NotificationPriority @default(NORMAL)
  
  // Content
  title             String
  message           String
  icon              String?
  color             String?
  
  // Metadata
  relatedId         String? // ID of related entity (game, event, etc.)
  relatedType       String? // Type of related entity
  actionUrl         String?
  
  // Status
  isRead            Boolean  @default(false)
  isDeleted         Boolean  @default(false)
  
  // Timestamps
  createdAt         DateTime @default(now())
  readAt            DateTime?
  deletedAt         DateTime?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

model Transaction {
  id                String   @id @default(cuid())
  userId            String
  type              TransactionType
  status            TransactionStatus @default(PENDING)
  
  // Amount
  amount            Int
  balanceBefore     Int
  balanceAfter      Int
  
  // Description
  description       String
  reference         String? // External reference
  
  // Metadata
  relatedId         String? // ID of related entity
  relatedType       String? // Type of related entity
  metadata          Json?
  
  // Timestamps
  createdAt         DateTime @default(now())
  processedAt       DateTime?
  failedAt          DateTime?
  failedReason      String?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("transactions")
}

model Purchase {
  id                String   @id @default(cuid())
  userId            String
  category          PurchaseCategory
  status            PurchaseStatus @default(PENDING)
  
  // Item details
  itemName          String
  itemDescription   String?
  itemImage         String?
  quantity          Int      @default(1)
  
  // Pricing
  price             Decimal  @db.Decimal(10, 2)
  currency          String   @default("GBP")
  totalAmount       Decimal  @db.Decimal(10, 2)
  
  // Tokens
  tokensSpent       Int      @default(0)
  tokensEarned      Int      @default(0)
  
  // Shipping
  shippingAddress   Json?
  trackingNumber    String?
  
  // Timestamps
  createdAt         DateTime @default(now())
  confirmedAt       DateTime?
  shippedAt         DateTime?
  deliveredAt       DateTime?
  cancelledAt       DateTime?
  cancelledReason   String?
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("purchases")
}

model SocialStats {
  id                String   @id @default(cuid())
  userId            String   @unique
  
  // Social media stats
  twitterFollowers  Int      @default(0)
  instagramFollowers Int     @default(0)
  facebookFollowers Int      @default(0)
  youtubeSubscribers Int     @default(0)
  
  // Engagement stats
  totalPosts        Int      @default(0)
  totalLikes        Int      @default(0)
  totalShares       Int      @default(0)
  totalComments     Int      @default(0)
  
  // Platform-specific
  twitterPosts      Int      @default(0)
  instagramPosts    Int      @default(0)
  facebookPosts     Int      @default(0)
  youtubeVideos     Int      @default(0)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("social_stats")
}

model ReputationHistory {
  id                String   @id @default(cuid())
  userId            String
  action            ReputationAction
  category          ReputationCategory
  
  // Details
  points            Int
  reason            String?
  description       String?
  
  // Metadata
  relatedId         String? // ID of related entity
  relatedType       String? // Type of related entity
  metadata          Json?
  
  // Timestamps
  createdAt         DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("reputation_history")
}

model UserAchievement {
  id                String   @id @default(cuid())
  userId            String
  title             String
  description       String?
  icon              String?
  
  // Achievement details
  category          String?
  rarity            String?
  tokens            Int      @default(0)
  experience        Int      @default(0)
  
  // Timestamps
  earnedAt          DateTime @default(now())
  
  // Relations
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_achievements")
}

model Token {
  id        String   @id @default(cuid())
  userId    String   @unique @map("user_id")
  token     Json
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("tokens")
}

model ClubAchievement {
  id                String   @id @default(cuid())
  clubId            String
  title             String
  description       String?
  icon              String?
  
  // Achievement details
  category          String?
  year              Int?
  competition       String?
  
  // Timestamps
  earnedAt          DateTime @default(now())
  
  // Relations
  club              Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  
  @@map("club_achievements")
}

model FanGroupAchievement {
  id                String   @id @default(cuid())
  fanGroupId        String
  title             String
  description       String?
  icon              String?
  
  // Achievement details
  category          String?
  year              Int?
  
  // Timestamps
  earnedAt          DateTime @default(now())
  
  // Relations
  fanGroup          FanGroup @relation(fields: [fanGroupId], references: [id], onDelete: Cascade)
  
  @@map("fan_group_achievements")
}
